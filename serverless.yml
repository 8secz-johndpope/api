service: entu-api

provider:
    name: aws
    runtime: nodejs12.x
    stage: prod
    stackName: ${self:service}
    apiName: ${self:service}
    region: eu-central-1
    endpointType: regional
    memorySize: 256
    timeout: 30
    logRetentionInDays: 365

    tracing:
        apiGateway: true
        lambda: true

    apiGateway:
        minimumCompressionSize: 32

    iamRoleStatements:
        -
            Effect: Allow
            Action:
                - s3:GetObject
                - s3:GetObjectAcl
            Resource: arn:aws:s3:::${ssm:/entu-api-files-s3-bucket~true}/*
        -
            Effect: Allow
            Action:
                - xray:PutTraceSegments
                - xray:PutTelemetryRecords
            Resource: '*'
        -
            Effect: Allow
            Action:
                - sqs:SendMessage
                - sqs:GetQueueUrl
            Resource: ${ssm:/entu-api-entity-aggregate-queue~true}
        -
            Effect: Allow
            Action: sqs:ListQueues
            Resource: arn:aws:sqs:${self:provider.region}:*:*
        -
            Effect: Allow
            Action: ssm:GetParameter
            Resource: arn:aws:ssm:${self:provider.region}:*:*

    deploymentBucket:
        name: ${self:service}
        serverSideEncryption: AES256

    environment:
        GIT_BRANCH: ${git:branch}
        GIT_SHA1: ${git:sha1}

    vpc:
        securityGroupIds:
            - ${ssm:/entu-api-vpc-security-group-1~true}
        subnetIds:
            - ${ssm:/entu-api-vpc-subnet-1~true}
            - ${ssm:/entu-api-vpc-subnet-2~true}
            - ${ssm:/entu-api-vpc-subnet-3~true}

package:
    individually: true
    exclude:
        - docs/**
        - layers/**
        - node_modules/**
        - src/**
        - '*'
    include:
        - src/_helpers.js

functions:
    account-get:
        handler: src/account/get.handler
        name: ${self:service}-account-get
        description: Returns account info and usage statistics
        package:
            include:
                - src/account/get.js
        layers:
            - {Ref: CommonNodeLibsLambdaLayer}
        events:
            -
                http:
                    path: /account
                    method: get
                    cors: true

    auth-get:
        handler: src/auth/get.handler
        name: ${self:service}-auth-get
        description: Authenticates user by API key
        package:
            include:
                - src/auth/get.js
        layers:
            - {Ref: CommonNodeLibsLambdaLayer}
        events:
            -
                http:
                    path: /auth
                    method: get
                    cors: true

    auth-apple-get:
        handler: src/auth/apple/get.handler
        name: ${self:service}-auth-apple-get
        description: Redirects user to auth in Apple
        package:
            include:
                - src/auth/apple/get.js
        layers:
            - {Ref: CommonNodeLibsLambdaLayer}
        events:
            -
                http:
                    path: /auth/apple
                    method: get

    auth-apple-post:
        handler: src/auth/apple/post.handler
        name: ${self:service}-auth-apple-post
        description: Handles return request from Apple auth
        package:
            include:
                - src/auth/apple/post.js
        layers:
            - {Ref: CommonNodeLibsLambdaLayer}
        events:
            -
                http:
                    path: /auth/apple
                    method: post

    auth-google-get:
        handler: src/auth/google/get.handler
        name: ${self:service}-auth-google-get
        description: Redirects user to auth in Google
        package:
            include:
                - src/auth/google/get.js
        layers:
            - {Ref: CommonNodeLibsLambdaLayer}
        events:
            -
                http:
                    path: /auth/google
                    method: get

    auth-google-post:
        handler: src/auth/google/post.handler
        name: ${self:service}-auth-google-post
        description: Handles return request from Google auth
        package:
            include:
                - src/auth/google/post.js
        layers:
            - {Ref: CommonNodeLibsLambdaLayer}
        events:
            -
                http:
                    path: /auth/google
                    method: post

    auth-microsoft-get:
        handler: src/auth/microsoft/get.handler
        name: ${self:service}-auth-microsoft-get
        description: Redirects user to auth in Google
        package:
            include:
                - src/auth/microsoft/get.js
        layers:
            - {Ref: CommonNodeLibsLambdaLayer}
        events:
            -
                http:
                    path: /auth/microsoft
                    method: get

    auth-microsoft-post:
        handler: src/auth/microsoft/post.handler
        name: ${self:service}-auth-microsoft-post
        description: Handles return request from Google auth
        package:
            include:
                - src/auth/microsoft/post.js
        layers:
            - {Ref: CommonNodeLibsLambdaLayer}
        events:
            -
                http:
                    path: /auth/microsoft
                    method: post

    auth-lhv-get:
        handler: src/auth/lhv/get.handler
        name: ${self:service}-auth-lhv-get
        description: Get LHV banklink form url and signed data
        package:
            include:
                - src/auth/lhv/get.js
        layers:
            - {Ref: CommonNodeLibsLambdaLayer}
        events:
            -
                http:
                    path: /auth/lhv
                    method: get

    auth-lhv-post:
        handler: src/auth/lhv/post.handler
        name: ${self:service}-auth-lhv-post
        description: Handles POST request from LHV banklink
        package:
            include:
                - src/auth/lhv/post.js
        layers:
            - {Ref: CommonNodeLibsLambdaLayer}
        events:
            -
                http:
                    path: /auth/lhv
                    method: post

    entity-get:
        handler: src/entity/get.handler
        name: ${self:service}-entity-get
        description: Get one entity with given id or list of entities if id is not given
        package:
            include:
                - src/entity/get.js
        layers:
            - {Ref: CommonNodeLibsLambdaLayer}
        events:
            -
                http:
                    path: /entity
                    method: get
                    cors: true
            -
                http:
                    path: /entity/{id}
                    method: get
                    cors: true

    entity-post:
        handler: src/entity/post.handler
        name: ${self:service}-entity-post
        description: Add new properties to entity
        package:
            include:
                - src/entity/post.js
        layers:
            - {Ref: CommonNodeLibsLambdaLayer}
        events:
            -
                http:
                    path: /entity
                    method: post
                    cors: true
            -
                http:
                    path: /entity/{id}
                    method: post
                    cors: true

    entity-delete:
        handler: src/entity/delete.handler
        name: ${self:service}-entity-delete
        description: Delete entity with given id
        package:
            include:
                - src/entity/delete.js
        layers:
            - {Ref: CommonNodeLibsLambdaLayer}
        events:
            -
                http:
                    path: /entity/{id}
                    method: delete
                    cors: true

    entity-aggregate:
        handler: src/entity/aggregate.handler
        name: ${self:service}-entity-aggregate
        description: Aggregate entity with given id
        package:
            include:
                - src/entity/aggregate.js
        layers:
            - {Ref: CommonNodeLibsLambdaLayer}
        reservedConcurrency: 10
        events:
            -
                sqs:
                    arn: ${ssm:/entu-api-entity-aggregate-queue~true}
                    batchSize: 10

    property-get:
        handler: src/property/get.handler
        name: ${self:service}-property-get
        description: Get property with given id
        package:
            include:
                - src/property/get.js
        layers:
            - {Ref: CommonNodeLibsLambdaLayer}
        events:
            -
                http:
                    path: /property/{id}
                    method: get
                    cors: true

    property-delete:
        handler: src/property/delete.handler
        name: ${self:service}-property-delete
        description: Delete property with given id
        package:
            include:
                - src/property/delete.js
        layers:
            - {Ref: CommonNodeLibsLambdaLayer}
        events:
            -
                http:
                    path: /property/{id}
                    method: delete
                    cors: true

layers:
    commonNodeLibs:
        path: layers
        compatibleRuntimes:
            - nodejs10.x

# resources:
#     Resources:
#         entityAggregateQueue:
#             Type: AWS::SQS::Queue
#             Properties:
#                 QueueName: entu-api-entity-aggregate-queue
#         entuFilesS3:
#             Type: AWS::S3::Bucket
#             Properties:
#                 BucketName: ${ssm:/entu-api-files-s3-bucket~true}

plugins:
    - serverless-domain-manager
    - serverless-plugin-git-variables

custom:
    exportGitVariables: false
    customDomain:
        domainName: ${ssm:/entu-api-domain~true}
        basePath: ''
        stage: ${self:provider.stage}
        createRoute53Record: false
        endpointType: regional
